@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD - Insert";

    //retreive what button was pressed
    var thebutton = Request.Form["theButton"];

    var productname = "";
    var supplierid = "";
    var categoryid = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var discontinued = "";

    //Obtain the record collection (dataset) for the supplierID and the categoryID
    var db = Database.Open("NWDB");

    var supplierquery = @"SELECT SupplierID, CompanyName
                         FROM Suppliers
                         ORDER BY CompanyName";


    var categoryquery = @"SELECT CategoryID, CategoryName
                          FROM Categories
                          ORDER BY CategoryName";

    //Execution of Select statements
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);
}


@if (IsPost)
        {
            if (thebutton.Equals("clear"))
            {
                //Empty the fields of data
                productname = "";
                supplierid = "";
                categoryid = "";
                quantityperunit = "";
                unitprice = "";
                unitsinstock = "";
                unitsonorder = "";
                reorderlevel = "";
                discontinued = "";

            }
            else
            {
                //Process the entered data//


                //Retreive the data within the input controls
                //could also do it on top of page, or just here when user pressed the button
                productname = Request.Form["ProductName"];
                supplierid = Request.Form["SupplierList"]; //input from web controls are strings
                categoryid = Request.Form["CategoryList"];
                quantityperunit = Request.Form["QuantityPerUnit"];
                unitprice = Request.Form["UnitPrice"];
                unitsinstock = Request.Form["UnitsOnStock"];
                unitsonorder = Request.Form["UnitsOnOrder"];
                reorderlevel = Request.Form["ReorderLevel"];
                discontinued = Request.Form["Discontinued"];

                try
                {
                    //Connect to the Database
                    //var db = Database.Open("NWDB"); Opened on top of page

                    //Create the SQL Insert command
                    var insertcommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued)
                      VALUES(@0, @1, @2, @3, @4, @5, @6, @7, @8)";


                    //Execute the Insert command
                    //To execute the Insert, Update, or Delete command, use .Execute()
                    db.Execute(insertcommand, productname,
                                              supplierid.Equals("0") ? null : supplierid,
                                              categoryid.Equals("0") ? null : categoryid,
                                              string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                                              string.IsNullOrEmpty(unitprice) ? null : unitprice,
                                              string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                                              string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                                              string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                                              0);


                    //Get the identity value of the last inserted record.
                    var x = db.GetLastInsertId();

                    //Display a success message
                    <p class="col-md-12 text-center">
                        <span style="color:lawngreen"><strong>New Product Added</strong></span>
                    </p>

                }
                catch (Exception ex)
                {
                    <p class="col-md-12 text-center">
                        <span style="color:firebrick"><strong>Error: @ex.Message</strong></span>
                    </p>
                }
            }
        }
        else
        {
            //1st Pass of the page
            //Initialization of an web control on the page
        }





@section banner{
    <h1>CRUD - Insert</h1>
    <blockquote class="alert alert-info">
        This form will demonstrate the create (insert) of CRUD. It will demonstrate using bootstrap text alignment for setting up right aligned text, default left aligned Web Controls,
        and centered aligned buttons. The Input controls and their label  text controls are in a 2 column format. The submit buttons are centered on another row. Tool tips are used on the
        web controls as a placeholder prases. Try/Catch will be used to capture processing errors.
        <br /><br />
        The Products Table will be maintained. It has a primary identity key. Thus, no need for a field for the Primary Key is required on this form. This form ONLY does insert.
        However, if you wished to have a field to display the new Primary Key when it is created, you could create a &ltLabel&gt field for the output display of the Primary Key.
        (If this page would do insert and update we would need a primary key)
    </blockquote>
}

<form id="theForm" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductName">Name:</label><br />
            <label for="SupplierList">Supplier:</label><br />
            <label for="CategoryID">Category:</label><br />
            <label for="QuantityPerUnit">Qty/Unit:</label><br />
            <label for="UnitPrice">Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">QOO:</label><br />
            <label for="ReorderLevel">RoL:</label><br />
            <label for="Discontinued">Disc.:</label><br /><br />
        </div>
        <div class="col-md-6">
            <input type="text" id="ProductName" name="ProductName" placeholder="Enter Product Name" title="ProductName" value="@productname" /><br />
            <select id="SupplierList" name="SupplierList">
                <option value="0">Select supplier...</option>
                @foreach(var item in supplierlist)
                {
                    //When the select control is created and loaded, by default the 1st option tag is shown as the selected option
                    //The value attribute should be set to the data that is required by the record
                    //The display text is only required by the user to make the selection

                    //To retain the previous selected value, you need to test the previous selected value against the current item that is being used to create the option line. 
                    //Remember, the previous value is a "string"
                    //Therefore: the current item value needs to also be a string
                    //If the previous selected value is == to the current item then the option tag needs to have the attribute "selected"  added to the tag
                    if(supplierid == item.SupplierID.ToString()) //previousvalue vs item.value
                    {
                        <option value="@item.SupplierID" selected>@item.CompanyName</option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">@item.CompanyName</option>
                    }
                    
                }
            </select><br />
            <select id="CatergoyList" name="CategoryList">
                 <option value="0">Select Category...</option>
                         @foreach (var item in categorylist)
                         {
                             if (categoryid == item.CategoryID.ToString()) //previousvalue vs item.value
                             {
                                 <option value="@item.CategoryID" selected>@item.CategroyName</option>
                             }
                             else
                             {
                                 <option value="@item.CategoryID">@item.CategoryName</option>
                             }
                         }
                     </select>

            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit" placeholder="Enter Product Name" value="@quantityperunit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice" placeholder="Enter UnitPrice" value="@unitprice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock" placeholder="Enter UnitsInStock" value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder" placeholder="Enter UnitsOnOrder" value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel" placeholder="Enter ReorderLevel" value="@reorderlevel" /><br />
            <input type="checkbox" id="Discontinued" name="Discontinued" @(string.IsNullOrEmpty(discontinued) ? "" : "checked") />(discontinued if checked)<br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <button class="btn btn-primary" type="submit" name="theButton" id="theButton" value="submit">Submit</button>&nbsp;&nbsp;
            <button class="btn btn-light" type="submit" name="theButton" id="theButton" value="clear">Clear</button>
        </div>
    </div>
</form>
