@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "WebGrid Demo";

    //To receive incoming data passed as a parameter on the URL address you will use Request.QueryString["xxxx"] where xxxx is the parameter label
    //Just like a control; if the parameter label does NOT exist, QueryString will return a null
    var incomingParameter = Request.QueryString["cid"];

    //Test: did a parameter actually exist
    if(string.IsNullOrEmpty(incomingParameter))
    {
        Response.Redirect("MultiRecordQuery.cshtml");
    }


    //Connect to Database
    var db = Database.Open("NWDB");

    //Select Statement saved in var querycommand
    var querycommand = @"SELECT ProductID, ProductName, UnitPrice, QuantityPerUnit, Discontinued 
                         FROM Products
                         WHERE CategoryID = @0";

    //Execution of Select Statement (querycommand)
    var results = db.Query(querycommand, incomingParameter);


    //The query will be returning a single value, not a collection of rows
    //Use .QueryValue() to execute the sql command
    //Testing of results would use xxxx == null
    var getnameCommand = @"SELECT CategoryName
                            FROM Categories
                            WHERE CategoryID = @0";
    var categoryname = db.QueryValue(getnameCommand, incomingParameter);




    //Create an instance of the WebGrid
    //Notice the collection (results) is passed at the time of instantiation
    //To set you page size, you need to do this on the new command, NOT within the GetHtml()
    var gridinstance = new WebGrid(results, rowsPerPage:3);
}


@section banner{
    <h1>Display a Collection of Records using Web Grid</h1>
}


<div class="row">
    @* To center your WebGrid on the page, you can play with your bootstrap offset-nn and col-xx-nn classes *@
    <div class="offset-3 col-md-6">
        <span style="font-size:x-large"><strong>Products for Category @*@incomingParameter*@  @categoryname</strong></span>
        @* Use WebGrid

        NOTE: You DO NOT need to use all columns from your query. If you wish to omit a column, simply, DO NOT add the xxxx.Column() to your list of display columns
        Formatting for a datetime attribute format: (item) => item.somedatefield.ToString("MMM dd, yyyy")*@
        @gridinstance.GetHtml(
             tableStyle: "table table-striped table-bordered table-hover",
             mode: WebGridPagerModes.All,
             firstText: "Start",
             lastText: "End",
         columns: gridinstance.Columns(
             gridinstance.Column(columnName: "ProductID", header: "ID"),
             gridinstance.Column(columnName: "ProductName", header: "Product"),
             gridinstance.Column(columnName: "QuantityPerUnit", header: "Pkg"),
             gridinstance.Column(columnName: "UnitPrice", header: "$", format: (item) => item.UnitPrice.ToString("0.00")),
             gridinstance.Column(columnName: "Discontinued", header: "Disc.", format: @<input name="Discontinued" type="checkbox" value="@item.Discontinued" @(item.Discontinued == true ? "Checked" : null) disabled="disabled"/> ),

             gridinstance.Column(header:"", format: @<text><a href="~/SamplePages/WebGridDestination.cshtml?pid=@item.ProductID"
                                                              onclick="return confirm('Are you sure you wish to view @item.ProductName?')">View</a></text>)
         ))
    </div>
</div>