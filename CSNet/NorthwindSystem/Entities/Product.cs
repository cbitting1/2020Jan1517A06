using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#region Additional Namespaces
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
#endregion

namespace NorthwindSystem.Entities
{
    //annotations are use to assist EntityFramework in the mapping
    //of your class to the sql table

    [Table("Products")]
    public class Product
    {
        private string _QuantityPerUnit;

        //if you use the same name as the sql attribute
        //   for your Property name, order of properties
        //   does not matter
        //if you names are different then order is required

        // [Key] single attribute pkey, identity pkey
        // [Key, Column(Order = n)] compound pkeys, required in
        //            front of each property, n represents the
        //            physical order as found on sql table
        //[Key, DatabaseGenerated(DatabaseGeneratedOption.xxxx]
        //      .xxxx --> Identity: pkey on sql is an Identity pkey
        //                default
        //            --> None: pkey is NOT Identity, user entered
        //            --> Compute attribute is a sql computed attribute
        //                which means that NO actual data is stored
        //                in the sql table, it is generated by the
        //                expression in the sql table.
        [Key]
        public int ProductID { get; set; }

        // validation annotation
        //place the annotation in FRONT of the property it is associated with
        [Required(ErrorMessage = "Product name is required")]
        [StringLength(40,ErrorMessage = "Product name is limited to 40 characters")]
        public string ProductName { get; set; }

        //this foreign key is nullable on the sql table
        //you may be tempted to use the [ForeignKey] annotation
        //   BUT DON'T.
        //the [ForeignKey] annotation is ONLY required if the
        //   sql table does not use the same name for it's
        //   foreign key as it's parent primary key
        //OR
        //if your property name does not match the sql attribute
        //    name
        public int? SupplierID {get;set;}
        public int? CategoryID { get; set; }

        //nullable strings can still be fully implemented
        [StringLength(20, ErrorMessage = "Quantity per unit is limited to 20 characters")]
        public string QuantityPerUnit
        {
            get { return _QuantityPerUnit; }
            set { _QuantityPerUnit = string.IsNullOrEmpty(value) ? null : value; }
        }

        //money requires the use of decimal, if it complains use double
        [Range(0, int.MaxValue, ErrorMessage ="Unit price is 0.00 or greater dollars.")]
        public decimal? UnitPrice { get; set; }

        [Range(0, 32767, ErrorMessage = "Unit in stock must be greater than 0")]
        public Int16? UnitsInStock { get; set; }

        [Range(0, 32767, ErrorMessage = "Unit in order must be greater than 0")]
        public Int16? UnitsOnOrder { get; set; }

        [Range(0, 32767, ErrorMessage = "Reorder level must be greater than 0")]
        public Int16? ReorderLevel { get; set; }
        public bool Discontinued { get; set; }

        //Re-only properties that are setup in your class to make
        //programming easier
        //NEVER try to load this property with data. THERE IS NO set!!!!!
        [NotMapped]
        public string NameAndID
        {
            get { return ProductName + "(" + ProductID + ")"; }
        }
    }
}
